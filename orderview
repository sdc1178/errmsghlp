package com.kroger.pos.cart.ui

import androidx.compose.animation.animateContentSize
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.defaultMinSize
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Card
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Rect
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Outline
import androidx.compose.ui.graphics.Paint
import androidx.compose.ui.graphics.Path
import androidx.compose.ui.graphics.PathEffect
import androidx.compose.ui.graphics.drawOutline
import androidx.compose.ui.graphics.drawscope.drawIntoCanvas
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.kroger.design.components.ComponentSize
import com.kroger.design.components.ValidationMessageState
import com.kroger.design.compose.LIGHT_MODE_PREVIEW_BACKGROUND
import com.kroger.design.compose.extensions.appBackground
import com.kroger.design.compose.extensions.textColorPrimary
import com.kroger.design.compose.theme.KdsTheme
import com.kroger.pos.cart.R
import com.kroger.pos.cart.pub.model.CartItem
import com.kroger.pos.cart.pub.model.DisplayValue
import com.kroger.pos.cart.pub.model.Order
import com.kroger.pos.cart.pub.model.testCartItem
import com.kroger.pos.cart.pub.model.testItemDetail
import com.kroger.pos.cart.pub.model.testPrices
import com.kroger.pos.cart.pub.nav.OrderNavRoute
import com.kroger.pos.cart.pub.repo.NetworkState
import com.kroger.pos.commonviews.KdsInlineMessage
import com.kroger.pos.commonviews.KdsStepper
import com.kroger.pos.commonviews.KdsStepperStyle
import com.kroger.pos.primitivesextensions.dollarFormat
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.flowOf
import kotlin.random.Random

@Composable
fun OrderView(
    orderFlow: StateFlow<Order?>,
    stepperAction: (Int, CartItem) -> Unit,
    expandedItemFlow: Flow<Int>,
    setExpandedItem: (Int) -> Unit,
    updateItemPrice: (CartItem, Double, String) -> Unit,
    itemUpdateState: Flow<NetworkState?>,
    clearUpdateState: () -> Unit,
    navController: NavController,
) {
    val order by orderFlow.collectAsState()
    val expandedItemIndex by expandedItemFlow.collectAsState(initial = 0)

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(KdsTheme.colors.appBackground),
        contentAlignment = Alignment.BottomCenter
    ) {
        var footerHeight by remember { mutableStateOf(0.dp) }
        val items = order?.items?.takeIf { it.isNotEmpty() }
        items?.let { cartItems ->
            ItemsView(
                cartItems,
                expandedItemIndex,
                setExpandedItem,
                stepperAction,
                updateItemPrice,
                itemUpdateState,
                clearUpdateState,
                footerHeight
            )
        } ?: EmptyCartView()

        val density = LocalDensity.current
        Column(
            modifier = Modifier
                .onGloballyPositioned { coordinates ->
                    footerHeight = density.run { coordinates.size.height.toDp() }
                }
        ) {
            KdsInlineMessage(
                label = "This is a something message",
                style = ValidationMessageState.ERROR
            )
            CustomerLoyaltyInfo(
                order?.customerLoyalty
            ) { navController.navigate(OrderNavRoute.ALT_ID.id) }
            order?.items?.takeIf { it.isNotEmpty() }?.let {
                RunningTotal(cartItems = it) { navController.navigate(OrderNavRoute.SUMMARY.id) }
            }
        }
    }
}

@Composable
private fun ItemsView(
    cartItems: List<CartItem>,
    expandedItemIndex: Int,
    setExpandedItem: (Int) -> Unit,
    stepperAction: (Int, CartItem) -> Unit,
    updateItemPrice: (CartItem, Double, String) -> Unit,
    itemUpdateState: Flow<NetworkState?>,
    clearUpdateState: () -> Unit,
    footerHeight: Dp
) {
    if (expandedItemIndex > cartItems.indices.last)
        setExpandedItem(cartItems.indices.last)
    val scrollState = rememberLazyListState()
    var priceUpdateItem by remember { mutableStateOf<CartItem?>(null) }

    LazyColumn(
        contentPadding = PaddingValues(8.dp),
        verticalArrangement = Arrangement.spacedBy(8.dp),
        state = scrollState,
        modifier = Modifier.fillMaxSize().animateContentSize()
    ) {
        itemsIndexed(
            cartItems,
            key = { _, item -> item.id }
        ) { index, cartItem ->
            Card(
                Modifier
                    .fillMaxWidth()
                    .clickable { setExpandedItem(index) },
                elevation = 4.dp,
                shape = RoundedCornerShape(8.dp)
            ) {
                if (index == expandedItemIndex) ExpandedCartItem(
                    cartItem,
                    stepperAction,
                    editItemPrice = {
                        priceUpdateItem = it
                    }
                )
                else CollapsedCartItem(cartItem)
            }
        }
        // so the bottom item stops scrolling above the loyalty and subtotal
        item {
            Spacer(modifier = Modifier.height(footerHeight))
        }
    }

    UpdatePriceDialog(
        {
            priceUpdateItem = null
            clearUpdateState()
        },
        priceUpdateItem,
        updateItemPrice,
        itemUpdateState
    )

    LaunchedEffect(expandedItemIndex to cartItems) {
        scrollState.animateScrollToItem(expandedItemIndex)
    }
}

@Composable
fun ExpandedCartItem(
    item: CartItem,
    updateQuantity: (Int, CartItem) -> Unit,
    editItemPrice: (CartItem) -> Unit
) {
    Column(
        Modifier.padding(8.dp),
    ) {
        Row(
            horizontalArrangement = Arrangement.spacedBy(8.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                modifier = Modifier.weight(1f),
                text = item.total.dollarFormat(),
                style = KdsTheme.typography.headerSmall,
                color = KdsTheme.colors.textColorPrimary,
                fontWeight = FontWeight.Bold,
            )
            Text(
                text = item.unitPrice,
                style = KdsTheme.typography.bodySmall,
                color = KdsTheme.colors.textColorPrimary,
                maxLines = 1,
            )
            Box(modifier = Modifier.clickable { editItemPrice(item) }) {
                Text(
                    text = stringResource(R.string.edit),
                    style = KdsTheme.typography.bodySmall,
                    color = KdsTheme.colors.accentLessProminent,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier
                        .padding(horizontal = 8.dp, vertical = 4.dp)
                )
            }
        }
        Row(
            verticalAlignment = Alignment.Bottom
        ) {
            Column(modifier = Modifier.weight(1f)) {
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = item.title,
                    style = KdsTheme.typography.bodyMedium,
                    color = KdsTheme.colors.textColorPrimary,
                )
                Text(
                    text = item.description,
                    style = KdsTheme.typography.bodyMedium,
                    color = KdsTheme.colors.textColorPrimary,
                )
            }
            KdsStepper(
                currentQuantity = item.quantity,
                componentSize = ComponentSize.COMPACT,
                stepperStyle = KdsStepperStyle.StepperOnly(isDestructive = true),
                modifier = Modifier.width(96.dp)
            ) { quantity, _ ->
                updateQuantity(quantity, item)
            }
        }
    }
}

@Composable
fun CollapsedCartItem(item: CartItem) {
    Row(
        Modifier.padding(8.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        Text(
            text = item.total.dollarFormat(),
            style = KdsTheme.typography.headerSmall,
            fontWeight = FontWeight.Bold,
            color = KdsTheme.colors.textColorPrimary,
            modifier = Modifier.defaultMinSize(minWidth = 56.dp)
        )
        Text(
            text = item.title,
            style = KdsTheme.typography.bodyMedium,
            color = KdsTheme.colors.textColorPrimary,
            modifier = Modifier.weight(1f)
        )
        Text(
            text = stringResource(R.string.in_cart_amt_template, item.quantity),
            style = KdsTheme.typography.bodyMedium,
            color = KdsTheme.colors.textColorPrimary,
        )
        Image(
            modifier = Modifier.size(24.dp),
            painter = painterResource(id = R.drawable.kds_icons_chevron_down),
            contentDescription = stringResource(
                R.string.cd_expand_item_icon
            )
        )
    }
}

@Composable
fun EmptyCartView() {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        RoundedTriangle(
            modifier = Modifier
                .width(96.dp)
                .height(48.dp),
            cornerRadius = 4.dp
        )
        Text(
            text = stringResource(id = R.string.empty_cart_prompt),
            style = KdsTheme.typography.bodyLarge
        )
    }
}

@Composable
fun RoundedTriangle(
    modifier: Modifier,
    cornerRadius: Dp
) {
    Canvas(modifier = modifier) {
        val rect = Rect(Offset.Zero, size)
        val trianglePath = Path().apply {
            moveTo(rect.topCenter)
            lineTo(rect.bottomRight)
            lineTo(rect.bottomLeft)
            close()
        }

        drawIntoCanvas { canvas ->
            canvas.drawOutline(
                outline = Outline.Generic(trianglePath),
                paint = Paint().apply {
                    color = Color(0xff727374)
                    pathEffect = PathEffect.cornerPathEffect(cornerRadius.toPx())
                }
            )
        }
    }
}

fun Path.moveTo(offset: Offset) = moveTo(offset.x, offset.y)
fun Path.lineTo(offset: Offset) = lineTo(offset.x, offset.y)

@Preview(
    showBackground = true,
    backgroundColor = LIGHT_MODE_PREVIEW_BACKGROUND
)
@Composable
fun ItemsPreview() {
    KdsTheme {
        OrderView(
            MutableStateFlow(
                Order(
                    "orderId",
                    Random.nextLong(),
                    (1..5).map {
                        testCartItem.copy(
                            id = "id$it",
                            quantity = it,
                            itemDetail = testItemDetail.copy(
                                displayName = DisplayValue("title $it")
                            ),
                            testPrices,
                        )
                    },
                    total = 0.0,
                    totalItems = 0.0,
                    totalTaxes = 0.0,
                    totalPriceModifications = 0.0
                )
            ),
            { _, _ -> },
            flowOf(3),
            {},
            { _, _, _ -> },
            flowOf(NetworkState.Loading),
            {},
            rememberNavController(),
        )
    }
}

@Preview(
    showBackground = true,
    backgroundColor = LIGHT_MODE_PREVIEW_BACKGROUND
)
@Composable
fun EmptyPreview() {
    KdsTheme {
        OrderView(
            MutableStateFlow(null),
            { _, _ -> },
            flowOf(0),
            {},
            { _, _, _ -> },
            flowOf(NetworkState.Loading),
            {},
            rememberNavController(),
        )
    }
}
